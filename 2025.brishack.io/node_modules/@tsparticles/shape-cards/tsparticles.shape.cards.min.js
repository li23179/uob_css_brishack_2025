/*! For license information please see tsparticles.shape.cards.min.js.LICENSE.txt */
!function(e,s){if("object"==typeof exports&&"object"==typeof module)module.exports=s(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],s);else{var a="object"==typeof exports?s(require("@tsparticles/engine")):s(e.window);for(var t in a)("object"==typeof exports?exports:e)[t]=a[t]}}(this,(e=>(()=>{var s={303:s=>{s.exports=e}},a={};function t(e){var y=a[e];if(void 0!==y)return y.exports;var x=a[e]={exports:{}};return s[e](x,x.exports,t),x.exports}t.d=(e,s)=>{for(var a in s)t.o(s,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:s[a]})},t.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var y={};t.r(y),t.d(y,{loadCardsShape:()=>v});var x=t(303);function r(e,s){if(!s.segments.length||!s.segments[0].values.length)return;const{context:a,radius:t}=e;a.moveTo(s.segments[0].values[0].x*t,s.segments[0].values[0].y*t);for(const e of s.segments)a.bezierCurveTo(e.values[1].x*t,e.values[1].y*t,e.values[2].x*t,e.values[2].y*t,e.values[3].x*t,e.values[3].y*t);for(let e=s.segments.length-1;e>=0;e--){const y=s.segments[e];a.bezierCurveTo(-y.values[2].x*t,y.values[2].y*t,-y.values[1].x*t,y.values[1].y*t,-y.values[0].x*t,y.values[0].y*t)}}const o=.5,n={heart:{segments:[{values:[{x:0,y:o},{x:0,y:o},{x:o,y:0},{x:o,y:-o/2}]},{values:[{x:o,y:-o/2},{x:o,y:-o/2},{x:o,y:-o},{x:o/2,y:-o}]},{values:[{x:o/2,y:-o},{x:o/2,y:-o},{x:0,y:-o},{x:0,y:-o/2}]}]},diamond:{segments:[{values:[{x:0,y:o},{x:0,y:o},{x:.375,y:0},{x:.375,y:0}]},{values:[{x:.375,y:0},{x:.375,y:0},{x:0,y:-o},{x:0,y:-o}]}]},club:{segments:[{values:[{x:0,y:-o},{x:0,y:-o},{x:o/2,y:-o},{x:o/2,y:-o/2}]},{values:[{x:o/2,y:-o/2},{x:o/2,y:-o/2},{x:o,y:-o/2},{x:o,y:0}]},{values:[{x:o,y:0},{x:o,y:0},{x:o,y:o/2},{x:o/2,y:o/2}]},{values:[{x:o/2,y:o/2},{x:o/2,y:o/2},{x:o/8,y:o/2},{x:o/8,y:o/8}]},{values:[{x:o/8,y:o/8},{x:o/8,y:o/2},{x:o/2,y:o},{x:o/2,y:o}]},{values:[{x:o/2,y:o},{x:o/2,y:o},{x:0,y:o},{x:0,y:o}]}]},spade:{segments:[{values:[{x:0,y:-o},{x:0,y:-o},{x:o,y:-o/2},{x:o,y:0}]},{values:[{x:o,y:0},{x:o,y:0},{x:o,y:o/2},{x:o/2,y:o/2}]},{values:[{x:o/2,y:o/2},{x:o/2,y:o/2},{x:o/8,y:o/2},{x:o/8,y:o/8}]},{values:[{x:o/8,y:o/8},{x:o/8,y:o/2},{x:o/2,y:o},{x:o/2,y:o}]},{values:[{x:o/2,y:o},{x:o/2,y:o},{x:0,y:o},{x:0,y:o}]}]}};class l{constructor(){this.validTypes=["club","clubs"]}draw(e){r(e,n.club)}}class u{constructor(){this.validTypes=["diamond","diamonds"]}draw(e){r(e,n.diamond)}}class i{constructor(){this.validTypes=["heart","hearts"]}draw(e){r(e,n.heart)}}class d{constructor(){this.validTypes=["spade","spades"]}draw(e){r(e,n.spade)}}async function v(e,s=!0){(0,x.assertValidVersion)(e,"3.7.1"),await e.addShape(new d,s),await e.addShape(new i,s),await e.addShape(new u,s),await e.addShape(new l,s)}return y})()));