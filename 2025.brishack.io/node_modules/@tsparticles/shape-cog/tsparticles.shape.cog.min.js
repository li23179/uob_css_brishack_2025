/*! For license information please see tsparticles.shape.cog.min.js.LICENSE.txt */
!function(e,o){if("object"==typeof exports&&"object"==typeof module)module.exports=o(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],o);else{var t="object"==typeof exports?o(require("@tsparticles/engine")):o(e.window);for(var r in t)("object"==typeof exports?exports:e)[r]=t[r]}}(this,(e=>(()=>{var o={303:o=>{o.exports=e}},t={};function r(e){var n=t[e];if(void 0!==n)return n.exports;var a=t[e]={exports:{}};return o[e](a,a.exports,r),a.exports}r.d=(e,o)=>{for(var t in o)r.o(o,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},r.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};r.r(n),r.d(n,{loadCogShape:()=>d});var a=r(303);const i=2*Math.PI,c=0,s=0;class p{constructor(){this.validTypes=["cog"]}afterDraw(e){!function(e){const{context:o,particle:t,radius:r}=e;if(void 0===t.cogHoleRadius||void 0===t.cogInnerRadius||void 0===t.cogInnerTaper||void 0===t.cogNotches||void 0===t.cogOuterTaper)return;const n=r*t.cogHoleRadius/a.percentDenominator;o.globalCompositeOperation="destination-out",o.beginPath(),o.moveTo(n,s),o.arc(c,s,n,0,i),o.closePath(),o.fill(),o.globalCompositeOperation="source-over"}(e)}draw(e){!function(e){const{context:o,particle:t,radius:r}=e;if(void 0===t.cogHoleRadius||void 0===t.cogInnerRadius||void 0===t.cogInnerTaper||void 0===t.cogNotches||void 0===t.cogOuterTaper)return;const n=i/(2*t.cogNotches),c=n*t.cogInnerTaper*.005,s=n*t.cogOuterTaper*.005,p=r*t.cogInnerRadius/a.percentDenominator;let d=n,l=!1;for(o.moveTo(r*Math.cos(s),r*Math.sin(s));d<=i;d+=n)l?(o.lineTo(p*Math.cos(d-c),p*Math.sin(d-c)),o.lineTo(r*Math.cos(d+s),r*Math.sin(d+s))):(o.lineTo(r*Math.cos(d-s),r*Math.sin(d-s)),o.lineTo(p*Math.cos(d+c),p*Math.sin(d+c))),l=!l}(e)}particleInit(e,o){const t=o.shapeData;o.cogHoleRadius=(0,a.getRangeValue)(t?.holeRadius??44),o.cogInnerRadius=(0,a.getRangeValue)(t?.innerRadius??72),o.cogInnerTaper=(0,a.getRangeValue)(t?.innerTaper??35),o.cogNotches=(0,a.getRangeValue)(t?.notches??7),o.cogOuterTaper=(0,a.getRangeValue)(t?.outerTaper??50)}}async function d(e,o=!0){(0,a.assertValidVersion)(e,"3.7.1"),await e.addShape(new p,o)}return n})()));